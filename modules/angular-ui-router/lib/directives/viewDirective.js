"use strict";function $ViewDirectiveFill($compile,$controller,$transitions,$view,$q){var getControllerAs=core_1.parse("viewDecl.controllerAs"),getResolveAs=core_1.parse("viewDecl.resolveAs");return{restrict:"ECA",priority:-400,compile:function(tElement){var initial=tElement.html();return tElement.empty(),function(scope,$element){var data=$element.data("$uiView");if(!data)return $element.html(initial),void $compile($element.contents())(scope);var cfg=data.$cfg||{viewDecl:{},getTemplate:core_1.noop},resolveCtx=cfg.path&&new core_1.ResolveContext(cfg.path);$element.html(cfg.getTemplate($element,resolveCtx)||initial),core_1.trace.traceUIViewFill(data.$uiView,$element.html());var link=$compile($element.contents()),controller=cfg.controller,controllerAs=getControllerAs(cfg),resolveAs=getResolveAs(cfg),locals=resolveCtx&&services_1.getLocals(resolveCtx);if(scope[resolveAs]=locals,controller){var controllerInstance=$controller(controller,core_1.extend({},locals,{$scope:scope,$element:$element}));controllerAs&&(scope[controllerAs]=controllerInstance,scope[controllerAs][resolveAs]=locals),$element.data("$ngControllerController",controllerInstance),$element.children().data("$ngControllerController",controllerInstance),registerControllerCallbacks($q,$transitions,controllerInstance,scope,cfg)}if(core_1.isString(cfg.component))var kebobName=core_1.kebobString(cfg.component),tagRegexp_1=new RegExp("^(x-|data-)?"+kebobName+"$","i"),getComponentController=function(){var directiveEl=[].slice.call($element[0].children).filter(function(el){return el&&el.tagName&&tagRegexp_1.exec(el.tagName)});return directiveEl&&angular_1.ng.element(directiveEl).data("$"+cfg.component+"Controller")},deregisterWatch_1=scope.$watch(getComponentController,function(ctrlInstance){ctrlInstance&&(registerControllerCallbacks($q,$transitions,ctrlInstance,scope,cfg),deregisterWatch_1())});link(scope)}}}}function registerControllerCallbacks($q,$transitions,controllerInstance,$scope,cfg){!core_1.isFunction(controllerInstance.$onInit)||(cfg.viewDecl.component||cfg.viewDecl.componentProvider)&&hasComponentImpl||controllerInstance.$onInit();var viewState=core_1.tail(cfg.path).state.self,hookOptions={bind:controllerInstance};if(core_1.isFunction(controllerInstance.uiOnParamsChanged)){var resolveContext=new core_1.ResolveContext(cfg.path),viewCreationTrans_1=resolveContext.getResolvable("$transition$").data,paramsUpdated=function($transition$){if($transition$!==viewCreationTrans_1&&-1===$transition$.exiting().indexOf(viewState)){var toParams=$transition$.params("to"),fromParams=$transition$.params("from"),getNodeSchema=function(node){return node.paramSchema},toSchema=$transition$.treeChanges("to").map(getNodeSchema).reduce(core_1.unnestR,[]),fromSchema=$transition$.treeChanges("from").map(getNodeSchema).reduce(core_1.unnestR,[]),changedToParams=toSchema.filter(function(param){var idx=fromSchema.indexOf(param);return-1===idx||!fromSchema[idx].type.equals(toParams[param.id],fromParams[param.id])});if(changedToParams.length){var changedKeys_1=changedToParams.map(function(x){return x.id}),newValues=core_1.filter(toParams,function(val,key){return-1!==changedKeys_1.indexOf(key)});controllerInstance.uiOnParamsChanged(newValues,$transition$)}}};$scope.$on("$destroy",$transitions.onSuccess({},paramsUpdated,hookOptions))}if(core_1.isFunction(controllerInstance.uiCanExit)){var id_1=_uiCanExitId++,cacheProp_1="_uiCanExitIds",prevTruthyAnswer_1=function(trans){return!!trans&&(trans[cacheProp_1]&&trans[cacheProp_1][id_1]===!0||prevTruthyAnswer_1(trans.redirectedFrom()))},wrappedHook=function(trans){var promise,ids=trans[cacheProp_1]=trans[cacheProp_1]||{};return prevTruthyAnswer_1(trans)||(promise=$q.when(controllerInstance.uiCanExit(trans)),promise.then(function(val){return ids[id_1]=val!==!1})),promise},criteria={exiting:viewState.name};$scope.$on("$destroy",$transitions.onBefore(criteria,wrappedHook,hookOptions))}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.uiView=void 0;var core_1=require("@uirouter/core"),angular_1=require("../angular"),services_1=require("../services"),views_1=require("../statebuilders/views");exports.uiView=["$view","$animate","$uiViewScroll","$interpolate","$q",function($view,$animate,$uiViewScroll,$interpolate,$q){function getRenderer(){return{enter:function(element,target,cb){angular_1.ng.version.minor>2?$animate.enter(element,null,target).then(cb):$animate.enter(element,null,target,cb)},leave:function(element,cb){angular_1.ng.version.minor>2?$animate.leave(element).then(cb):$animate.leave(element,cb)}}}function configsEqual(config1,config2){return config1===config2}var rootData={$cfg:{viewDecl:{$context:$view._pluginapi._rootViewContext()}},$uiView:{}},directive={count:0,restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(tElement,tAttrs,$transclude){return function(scope,$element,attrs){function configUpdatedCallback(config){(!config||config instanceof views_1.Ng1ViewConfig)&&(configsEqual(viewConfig,config)||(core_1.trace.traceUIViewConfigUpdated(activeUIView,config&&config.viewDecl&&config.viewDecl.$context),viewConfig=config,updateView(config)))}function cleanupLastView(){if(previousEl&&(core_1.trace.traceUIViewEvent("Removing (previous) el",previousEl.data("$uiView")),previousEl.remove(),previousEl=null),currentScope&&(core_1.trace.traceUIViewEvent("Destroying scope",activeUIView),currentScope.$destroy(),currentScope=null),currentEl){var _viewData_1=currentEl.data("$uiViewAnim");core_1.trace.traceUIViewEvent("Animate out",_viewData_1),renderer.leave(currentEl,function(){_viewData_1.$$animLeave.resolve(),previousEl=null}),previousEl=currentEl,currentEl=null}}function updateView(config){var newScope=scope.$new(),animEnter=$q.defer(),animLeave=$q.defer(),$uiViewData={$cfg:config,$uiView:activeUIView},$uiViewAnim={$animEnter:animEnter.promise,$animLeave:animLeave.promise,$$animLeave:animLeave};newScope.$emit("$viewContentLoading",name);var cloned=$transclude(newScope,function(clone){clone.data("$uiViewAnim",$uiViewAnim),clone.data("$uiView",$uiViewData),renderer.enter(clone,$element,function(){animEnter.resolve(),currentScope&&currentScope.$emit("$viewContentAnimationEnded"),(core_1.isDefined(autoScrollExp)&&!autoScrollExp||scope.$eval(autoScrollExp))&&$uiViewScroll(clone)}),cleanupLastView()});currentEl=cloned,currentScope=newScope,currentScope.$emit("$viewContentLoaded",config||viewConfig),currentScope.$eval(onloadExp)}var previousEl,currentEl,currentScope,viewConfig,onloadExp=attrs.onload||"",autoScrollExp=attrs.autoscroll,renderer=getRenderer(),inherited=$element.inheritedData("$uiView")||rootData,name=$interpolate(attrs.uiView||attrs.name||"")(scope)||"$default",activeUIView={$type:"ng1",id:directive.count++,name:name,fqn:inherited.$uiView.fqn?inherited.$uiView.fqn+"."+name:name,config:null,configUpdated:configUpdatedCallback,get creationContext(){var fromParentTagConfig=core_1.parse("$cfg.viewDecl.$context")(inherited),fromParentTag=core_1.parse("$uiView.creationContext")(inherited);return fromParentTagConfig||fromParentTag}};core_1.trace.traceUIViewEvent("Linking",activeUIView),$element.data("$uiView",{$uiView:activeUIView}),updateView();var unregister=$view.registerUIView(activeUIView);scope.$on("$destroy",function(){core_1.trace.traceUIViewEvent("Destroying/Unregistering",activeUIView),unregister()})}}};return directive}],$ViewDirectiveFill.$inject=["$compile","$controller","$transitions","$view","$q"];var hasComponentImpl="function"==typeof angular_1.ng.module("ui.router").component,_uiCanExitId=0;angular_1.ng.module("ui.router.state").directive("uiView",exports.uiView),angular_1.ng.module("ui.router.state").directive("uiView",$ViewDirectiveFill);
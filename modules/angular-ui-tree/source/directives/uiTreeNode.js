!function(){"use strict";angular.module("ui.tree").directive("uiTreeNode",["treeConfig","UiTreeHelper","$window","$document","$timeout","$q",function(treeConfig,UiTreeHelper,$window,$document,$timeout,$q){return{require:["^uiTreeNodes","^uiTree"],restrict:"A",controller:"TreeNodeController",link:function(scope,element,attrs,controllersArr){var firstMoving,dragInfo,pos,placeElm,hiddenPlaceElm,dragElm,scrollContainerElm,unhover,elements,document_height,document_width,dragStart,dragMove,dragEnd,dragStartEvent,dragMoveEvent,dragEndEvent,dragCancelEvent,dragDelay,bindDragStartEvents,bindDragMoveEvents,unbindDragMoveEvents,keydownHandler,isHandleChild,el,isUiTreeRoot,treeOfOrigin,config={},hasTouch="ontouchstart"in window,treeScope=null,body=document.body,html=document.documentElement;angular.extend(config,treeConfig),config.nodeClass&&element.addClass(config.nodeClass),scope.init(controllersArr),scope.collapsed=!!UiTreeHelper.getNodeAttribute(scope,"collapsed")||treeConfig.defaultCollapsed,scope.expandOnHover=!!UiTreeHelper.getNodeAttribute(scope,"expandOnHover"),scope.scrollContainer=UiTreeHelper.getNodeAttribute(scope,"scrollContainer")||attrs.scrollContainer||null,scope.sourceOnly=scope.nodropEnabled||scope.$treeScope.nodropEnabled,scope.$watch(attrs.collapsed,function(val){"boolean"==typeof val&&(scope.collapsed=val)}),scope.$watch("collapsed",function(val){UiTreeHelper.setNodeAttribute(scope,"collapsed",val),attrs.$set("collapsed",val)}),scope.$watch(attrs.expandOnHover,function(val){("boolean"==typeof val||"number"==typeof val)&&(scope.expandOnHover=val)}),scope.$watch("expandOnHover",function(val){UiTreeHelper.setNodeAttribute(scope,"expandOnHover",val),attrs.$set("expandOnHover",val)}),attrs.$observe("scrollContainer",function(val){"string"==typeof val&&(scope.scrollContainer=val)}),scope.$watch("scrollContainer",function(val){UiTreeHelper.setNodeAttribute(scope,"scrollContainer",val),attrs.$set("scrollContainer",val),scrollContainerElm=document.querySelector(val)}),scope.$on("angular-ui-tree:collapse-all",function(){scope.collapsed=!0}),scope.$on("angular-ui-tree:expand-all",function(){scope.collapsed=!1}),dragStart=function(e){if((hasTouch||2!==e.button&&3!==e.which)&&!(e.uiTreeDragging||e.originalEvent&&e.originalEvent.uiTreeDragging)){var isHandleChild,cloneElm,eventElmTagName,tagName,eventObj,tdElm,hStyle,isTreeNode,isTreeNodeHandle,eventElm=angular.element(e.target);if(isHandleChild=UiTreeHelper.treeNodeHandlerContainerOfElement(eventElm),isHandleChild&&(eventElm=angular.element(isHandleChild)),cloneElm=element.clone(),isTreeNode=UiTreeHelper.elementIsTreeNode(eventElm),isTreeNodeHandle=UiTreeHelper.elementIsTreeNodeHandle(eventElm),(isTreeNode||isTreeNodeHandle)&&!(isTreeNode&&UiTreeHelper.elementContainsTreeNodeHandler(eventElm)||(eventElmTagName=eventElm.prop("tagName").toLowerCase(),"input"==eventElmTagName||"textarea"==eventElmTagName||"button"==eventElmTagName||"select"==eventElmTagName))){for(el=angular.element(e.target),isUiTreeRoot=el[0].attributes["ui-tree"];el&&el[0]&&el[0]!==element&&!isUiTreeRoot;){if(el[0].attributes&&(isUiTreeRoot=el[0].attributes["ui-tree"]),UiTreeHelper.nodrag(el))return;el=el.parent()}scope.beforeDrag(scope)&&(e.uiTreeDragging=!0,e.originalEvent&&(e.originalEvent.uiTreeDragging=!0),e.preventDefault(),eventObj=UiTreeHelper.eventObj(e),firstMoving=!0,dragInfo=UiTreeHelper.dragInfo(scope),treeOfOrigin=dragInfo.source.$treeScope.$id,tagName=element.prop("tagName"),"tr"===tagName.toLowerCase()?(placeElm=angular.element($window.document.createElement(tagName)),tdElm=angular.element($window.document.createElement("td")).addClass(config.placeholderClass).attr("colspan",element[0].children.length),placeElm.append(tdElm)):placeElm=angular.element($window.document.createElement(tagName)).addClass(config.placeholderClass),hiddenPlaceElm=angular.element($window.document.createElement(tagName)),config.hiddenClass&&hiddenPlaceElm.addClass(config.hiddenClass),pos=UiTreeHelper.positionStarted(eventObj,element),placeElm.css("height",element.prop("offsetHeight")+"px"),dragElm=angular.element($window.document.createElement(scope.$parentNodesScope.$element.prop("tagName"))).addClass(scope.$parentNodesScope.$element.attr("class")).addClass(config.dragClass),dragElm.css("width",UiTreeHelper.width(element)+"px"),dragElm.css("z-index",9999),hStyle=(element[0].querySelector(".angular-ui-tree-handle")||element[0]).currentStyle,hStyle&&(document.body.setAttribute("ui-tree-cursor",$document.find("body").css("cursor")||""),$document.find("body").css({cursor:hStyle.cursor+"!important"})),scope.sourceOnly&&placeElm.css("display","none"),element.after(placeElm),element.after(hiddenPlaceElm),dragElm.append(dragInfo.isClone()&&scope.sourceOnly?cloneElm:element),$document.find("body").append(dragElm),dragElm.css({left:eventObj.pageX-pos.offsetX+"px",top:eventObj.pageY-pos.offsetY+"px"}),elements={placeholder:placeElm,dragging:dragElm},bindDragMoveEvents(),scope.$apply(function(){scope.$treeScope.$callbacks.dragStart(dragInfo.eventArgs(elements,pos))}),document_height=Math.max(body.scrollHeight,body.offsetHeight,html.clientHeight,html.scrollHeight,html.offsetHeight),document_width=Math.max(body.scrollWidth,body.offsetWidth,html.clientWidth,html.scrollWidth,html.offsetWidth))}}},dragMove=function(e){var prev,next,leftElmPos,topElmPos,top_scroll,bottom_scroll,scrollContainerElmRect,target,targetX,targetY,displayElm,targetNode,targetElm,isEmpty,scrollDownBy,scrollUpBy,targetOffset,targetBefore,moveWithinTree,targetBeforeBuffer,targetHeight,targetChildElm,targetChildHeight,isDropzone,eventObj=UiTreeHelper.eventObj(e);if(dragElm){if(e.preventDefault(),$window.getSelection?$window.getSelection().removeAllRanges():$window.document.selection&&$window.document.selection.empty(),leftElmPos=eventObj.pageX-pos.offsetX,topElmPos=eventObj.pageY-pos.offsetY,0>leftElmPos&&(leftElmPos=0),0>topElmPos&&(topElmPos=0),topElmPos+10>document_height&&(topElmPos=document_height-10),leftElmPos+10>document_width&&(leftElmPos=document_width-10),dragElm.css({left:leftElmPos+"px",top:topElmPos+"px"}),scrollContainerElm?(scrollContainerElmRect=scrollContainerElm.getBoundingClientRect(),top_scroll=scrollContainerElm.scrollTop,bottom_scroll=top_scroll+scrollContainerElm.clientHeight,scrollContainerElmRect.bottom<eventObj.clientY&&bottom_scroll<scrollContainerElm.scrollHeight&&(scrollDownBy=Math.min(scrollContainerElm.scrollHeight-bottom_scroll,10),scrollContainerElm.scrollTop+=scrollDownBy),scrollContainerElmRect.top>eventObj.clientY&&top_scroll>0&&(scrollUpBy=Math.min(top_scroll,10),scrollContainerElm.scrollTop-=scrollUpBy)):(top_scroll=window.pageYOffset||$window.document.documentElement.scrollTop,bottom_scroll=top_scroll+(window.innerHeight||$window.document.clientHeight||$window.document.clientHeight),bottom_scroll<eventObj.pageY&&document_height>bottom_scroll&&(scrollDownBy=Math.min(document_height-bottom_scroll,10),window.scrollBy(0,scrollDownBy)),top_scroll>eventObj.pageY&&(scrollUpBy=Math.min(top_scroll,10),window.scrollBy(0,-scrollUpBy))),UiTreeHelper.positionMoved(e,pos,firstMoving),firstMoving)return void(firstMoving=!1);if(targetX=eventObj.pageX-($window.pageXOffset||$window.document.body.scrollLeft||$window.document.documentElement.scrollLeft)-($window.document.documentElement.clientLeft||0),targetY=eventObj.pageY-($window.pageYOffset||$window.document.body.scrollTop||$window.document.documentElement.scrollTop)-($window.document.documentElement.clientTop||0),angular.isFunction(dragElm.hide)?dragElm.hide():(displayElm=dragElm[0].style.display,dragElm[0].style.display="none"),$window.document.elementFromPoint(targetX,targetY),targetElm=angular.element($window.document.elementFromPoint(targetX,targetY)),isHandleChild=UiTreeHelper.treeNodeHandlerContainerOfElement(targetElm),isHandleChild&&(targetElm=angular.element(isHandleChild)),angular.isFunction(dragElm.show)?dragElm.show():dragElm[0].style.display=displayElm,UiTreeHelper.elementIsTree(targetElm)?targetNode=targetElm.controller("uiTree").scope:UiTreeHelper.elementIsTreeNodeHandle(targetElm)?targetNode=targetElm.controller("uiTreeHandle").scope:UiTreeHelper.elementIsTreeNode(targetElm)?targetNode=targetElm.controller("uiTreeNode").scope:UiTreeHelper.elementIsTreeNodes(targetElm)?targetNode=targetElm.controller("uiTreeNodes").scope:UiTreeHelper.elementIsPlaceholder(targetElm)?targetNode=targetElm.controller("uiTreeNodes").scope:UiTreeHelper.elementIsDropzone(targetElm)?(targetNode=targetElm.controller("uiTree").scope,isDropzone=!0):targetElm.controller("uiTreeNode")&&(targetNode=targetElm.controller("uiTreeNode").scope),moveWithinTree=targetNode&&targetNode.$treeScope&&targetNode.$treeScope.$id&&targetNode.$treeScope.$id===treeOfOrigin,moveWithinTree&&pos.dirAx)pos.distX>0&&(prev=dragInfo.prev(),prev&&!prev.collapsed&&prev.accept(scope,prev.childNodesCount())&&(prev.$childNodesScope.$element.append(placeElm),dragInfo.moveTo(prev.$childNodesScope,prev.childNodes(),prev.childNodesCount()))),pos.distX<0&&(next=dragInfo.next(),next||(target=dragInfo.parentNode(),target&&target.$parentNodesScope.accept(scope,target.index()+1)&&(target.$element.after(placeElm),dragInfo.moveTo(target.$parentNodesScope,target.siblings(),target.index()+1))));else{if(isEmpty=!1,!targetNode)return;if(!targetNode.$treeScope||targetNode.$parent.nodropEnabled||targetNode.$treeScope.nodropEnabled||placeElm.css("display",""),"uiTree"===targetNode.$type&&targetNode.dragEnabled&&(isEmpty=targetNode.isEmpty()),"uiTreeHandle"===targetNode.$type&&(targetNode=targetNode.$nodeScope),"uiTreeNode"!==targetNode.$type&&!isEmpty&&!isDropzone)return void(config.appendChildOnHover&&(next=dragInfo.next(),!next&&unhover&&(target=dragInfo.parentNode(),target.$element.after(placeElm),dragInfo.moveTo(target.$parentNodesScope,target.siblings(),target.index()+1),unhover=!1)));treeScope&&placeElm.parent()[0]!=treeScope.$element[0]&&(treeScope.resetEmptyElement(),treeScope.resetDropzoneElement(),treeScope=null),isEmpty?(treeScope=targetNode,targetNode.$nodesScope.accept(scope,0)&&dragInfo.moveTo(targetNode.$nodesScope,targetNode.$nodesScope.childNodes(),0)):isDropzone?(treeScope=targetNode,targetNode.$nodesScope.accept(scope,targetNode.$nodesScope.childNodes().length)&&dragInfo.moveTo(targetNode.$nodesScope,targetNode.$nodesScope.childNodes(),targetNode.$nodesScope.childNodes().length)):targetNode.dragEnabled()&&(angular.isDefined(scope.expandTimeoutOn)&&scope.expandTimeoutOn!==targetNode.id&&($timeout.cancel(scope.expandTimeout),delete scope.expandTimeout,delete scope.expandTimeoutOn,scope.$callbacks.expandTimeoutCancel()),targetNode.collapsed&&(scope.expandOnHover===!0||angular.isNumber(scope.expandOnHover)&&0===scope.expandOnHover?(targetNode.collapsed=!1,targetNode.$treeScope.$callbacks.toggle(!1,targetNode)):scope.expandOnHover!==!1&&angular.isNumber(scope.expandOnHover)&&scope.expandOnHover>0&&angular.isUndefined(scope.expandTimeoutOn)&&(scope.expandTimeoutOn=targetNode.$id,scope.$callbacks.expandTimeoutStart(),scope.expandTimeout=$timeout(function(){scope.$callbacks.expandTimeoutEnd(),targetNode.collapsed=!1,targetNode.$treeScope.$callbacks.toggle(!1,targetNode)},scope.expandOnHover))),targetElm=targetNode.$element,targetOffset=UiTreeHelper.offset(targetElm),targetHeight=UiTreeHelper.height(targetElm),targetChildElm=targetNode.$childNodesScope?targetNode.$childNodesScope.$element:null,targetChildHeight=targetChildElm?UiTreeHelper.height(targetChildElm):0,targetHeight-=targetChildHeight,targetBeforeBuffer=config.appendChildOnHover?.25*targetHeight:UiTreeHelper.height(targetElm)/2,targetBefore=eventObj.pageY<targetOffset.top+targetBeforeBuffer,targetNode.$parentNodesScope.accept(scope,targetNode.index())?targetBefore?(targetElm[0].parentNode.insertBefore(placeElm[0],targetElm[0]),dragInfo.moveTo(targetNode.$parentNodesScope,targetNode.siblings(),targetNode.index())):config.appendChildOnHover&&targetNode.accept(scope,targetNode.childNodesCount())?(targetNode.$childNodesScope.$element.prepend(placeElm),dragInfo.moveTo(targetNode.$childNodesScope,targetNode.childNodes(),0),unhover=!0):(targetElm.after(placeElm),dragInfo.moveTo(targetNode.$parentNodesScope,targetNode.siblings(),targetNode.index()+1)):!targetBefore&&targetNode.accept(scope,targetNode.childNodesCount())&&(targetNode.$childNodesScope.$element.append(placeElm),dragInfo.moveTo(targetNode.$childNodesScope,targetNode.childNodes(),targetNode.childNodesCount())))}scope.$apply(function(){scope.$treeScope.$callbacks.dragMove(dragInfo.eventArgs(elements,pos))})}},dragEnd=function(e){var dragEventArgs=dragInfo.eventArgs(elements,pos);e.preventDefault(),unbindDragMoveEvents(),$timeout.cancel(scope.expandTimeout),scope.$treeScope.$apply(function(){$q.when(scope.$treeScope.$callbacks.beforeDrop(dragEventArgs)).then(function(allowDrop){allowDrop!==!1&&scope.$$allowNodeDrop?(dragInfo.apply(),scope.$treeScope.$callbacks.dropped(dragEventArgs)):bindDragStartEvents()}).catch(function(){bindDragStartEvents()}).finally(function(){hiddenPlaceElm.replaceWith(scope.$element),placeElm.remove(),dragElm&&(dragElm.remove(),dragElm=null),scope.$treeScope.$callbacks.dragStop(dragEventArgs),scope.$$allowNodeDrop=!1,dragInfo=null;var oldCur=document.body.getAttribute("ui-tree-cursor");null!==oldCur&&($document.find("body").css({cursor:oldCur}),document.body.removeAttribute("ui-tree-cursor"))})})},dragStartEvent=function(e){scope.dragEnabled()&&dragStart(e)},dragMoveEvent=function(e){dragMove(e)},dragEndEvent=function(e){scope.$$allowNodeDrop=!0,dragEnd(e)},dragCancelEvent=function(e){dragEnd(e)},dragDelay=function(){var to;return{exec:function(fn,ms){ms||(ms=0),this.cancel(),to=$timeout(fn,ms)},cancel:function(){$timeout.cancel(to)}}}(),keydownHandler=function(e){27===e.keyCode&&dragEndEvent(e)},bindDragStartEvents=function(){element.bind("touchstart mousedown",function(e){scope.dragDelay>0?dragDelay.exec(function(){dragStartEvent(e)},scope.dragDelay):dragStartEvent(e)}),element.bind("touchend touchcancel mouseup",function(){scope.dragDelay>0&&dragDelay.cancel()})},bindDragStartEvents(),bindDragMoveEvents=function(){angular.element($document).bind("touchend",dragEndEvent),angular.element($document).bind("touchcancel",dragEndEvent),angular.element($document).bind("touchmove",dragMoveEvent),angular.element($document).bind("mouseup",dragEndEvent),angular.element($document).bind("mousemove",dragMoveEvent),angular.element($document).bind("mouseleave",dragCancelEvent),angular.element($document).bind("keydown",keydownHandler)},unbindDragMoveEvents=function(){angular.element($document).unbind("touchend",dragEndEvent),angular.element($document).unbind("touchcancel",dragEndEvent),angular.element($document).unbind("touchmove",dragMoveEvent),angular.element($document).unbind("mouseup",dragEndEvent),angular.element($document).unbind("mousemove",dragMoveEvent),angular.element($document).unbind("mouseleave",dragCancelEvent),angular.element($document).unbind("keydown",keydownHandler)}}}}])}();
describe("Date",function(){"use strict";var negativeDate,supportsDescriptors=Object.defineProperty&&function(){try{var obj={};Object.defineProperty(obj,"x",{enumerable:!1,value:obj});for(var _ in obj)return!1;return obj.x===obj}catch(e){return!1}}(),ifSupportsDescriptorsIt=supportsDescriptors?it:xit,has=Object.prototype.hasOwnProperty;beforeEach(function(){var negativeCanned=[{getTime:-0xc782b5b342b24,getUTCDay:4,getDay:4,dim:31},{getTime:-0xc782abb8f0724,getUTCDay:0,getDay:0,dim:29},{getTime:-0xc782a26369b24,getUTCDay:1,getDay:1,dim:31},{getTime:-0xc782986917724,getUTCDay:4,getDay:4,dim:30},{getTime:-0xc7828ec12af24,getUTCDay:6,getDay:6,dim:31},{getTime:-0xc78284c6d8b24,getUTCDay:2,getDay:2,dim:30},{getTime:-0xc7827b1eec324,getUTCDay:4,getDay:4,dim:31},{getTime:-0xc782712499f24,getUTCDay:0,getDay:0,dim:31},{getTime:-0xc782672a47b24,getUTCDay:3,getDay:3,dim:30},{getTime:-0xc7825d825b324,getUTCDay:5,getDay:5,dim:31},{getTime:-0xc782538808f24,getUTCDay:1,getDay:1,dim:30},{getTime:-0xc78249e01c724,getUTCDay:3,getDay:3,dim:31}];negativeDate=negativeCanned.map(function(item){var dateFirst=new Date(item.getTime),dateLast=new Date(item.getTime+864e5*(item.dim-1));return{dates:[dateFirst,dateLast],days:[1,item.dim],getUTCDay:[item.getUTCDay,(item.getUTCDay+item.dim-1)%7],getDay:[item.getDay,(item.getDay+item.dim-1)%7]}})}),describe(".now()",function(){it("should be the current time",function(){var before=(new Date).getTime(),middle=Date.now(),after=(new Date).getTime();expect(middle).not.toBeLessThan(before),expect(middle).not.toBeGreaterThan(after)})}),describe("constructor",function(){it("works with standard formats",function(){expect(+new Date("2012-12-31T23:59:59.000Z")).toBe(1356998399e3),expect(+new Date("2012-04-04T05:02:02.170Z")).toBe(1333515722170),expect(+new Date("2012-04-04T05:02:02.170999Z")).toBe(1333515722170),expect(+new Date("2012-04-04T05:02:02.17Z")).toBe(1333515722170),expect(+new Date("2012-04-04T05:02:02.1Z")).toBe(1333515722100),expect(+new Date("2012-04-04T24:00:00.000Z")).toBe(1333584e6),expect(+new Date("2012-02-29T12:00:00.000Z")).toBe(13305168e5),expect(+new Date("2011-03-01T12:00:00.000Z")).toBe(12989808e5),expect(new Date("2034-03-01T00:00:00.000Z")-new Date("2034-02-27T23:59:59.999Z")).toBe(86400001)}),ifSupportsDescriptorsIt("is not enumerable",function(){expect(Object.keys(new Date)).not.toContain("constructor")}),it("works as a function",function(){var zeroDate=Date(0);expect(zeroDate).toBe(String(zeroDate));var value=Date(1441705534578);expect(value).toBe(String(value))}),it("fixes this Safari 8/9 bug",function(){var offset=6e4*new Date(1970).getTimezoneOffset(),timestamp=2147483647,date=new Date(1970,0,1,0,0,0,timestamp),expectedTimestamp=timestamp+offset;expect(date.getTime()).toBe(expectedTimestamp);var brokenTimestamp=2147483648,brokenDate=new Date(1970,0,1,0,0,0,brokenTimestamp),expectedBrokenTimestamp=brokenTimestamp+offset;expect(brokenDate.getTime()).toBe(expectedBrokenTimestamp);var veryBrokenTS=1435734e6,veryBrokenDate=new Date(1970,0,1,0,0,0,veryBrokenTS),largeDate=new Date("Wed Jul 01 2015 07:00:00 GMT-0700 (PDT)"),expectedVeryBrokenTS=veryBrokenTS+6e4*largeDate.getTimezoneOffset();expect(veryBrokenDate.getTime()).toBe(expectedVeryBrokenTS)}),it("works with a Date object",function(){var date=new Date(1456297712984),copiedDate=new Date(date);expect(date).not.toBe(copiedDate),expect(copiedDate.getTime()).toBe(date.getTime()),expect(+copiedDate).toBe(+date),expect(String(copiedDate)).toBe(String(date))})}),describe(".parse()",function(){ifSupportsDescriptorsIt("is not enumerable",function(){expect(Object.getOwnPropertyDescriptor(Date,"parse").enumerable).toBe(!1)}),it("should be an invalid date",function(){expect(Date.parse("2012-11-31T23:59:59.000Z")).toBeFalsy(),expect(Date.parse("2012-12-31T23:59:60.000Z")).toBeFalsy(),expect(Date.parse("2012-04-04T24:00:00.500Z")).toBeFalsy(),expect(Date.parse("2012-12-31T10:08:60.000Z")).toBeFalsy(),expect(Date.parse("2012-13-01T12:00:00.000Z")).toBeFalsy(),expect(Date.parse("2012-12-32T12:00:00.000Z")).toBeFalsy(),expect(Date.parse("2012-12-31T25:00:00.000Z")).toBeFalsy(),expect(Date.parse("2012-12-31T24:01:00.000Z")).toBeFalsy(),expect(Date.parse("2012-12-31T12:60:00.000Z")).toBeFalsy(),expect(Date.parse("2012-12-31T12:00:60.000Z")).toBeFalsy(),expect(Date.parse("2012-00-31T23:59:59.000Z")).toBeFalsy(),expect(Date.parse("2012-12-00T23:59:59.000Z")).toBeFalsy(),expect(Date.parse("2011-02-29T12:00:00.000Z")).toBeFalsy()}),it("should work",function(){var dates={"2012-12-31T23:59:59.000Z":1356998399e3,"2012-04-04T05:02:02.170Z":1333515722170,"2012-04-04T05:02:02.170999Z":1333515722170,"2012-04-04T05:02:02.17Z":1333515722170,"2012-04-04T05:02:02.1Z":1333515722100,"2012-04-04T24:00:00.000Z":1333584e6,"2012-02-29T12:00:00.000Z":13305168e5,"2011-03-01T12:00:00.000Z":12989808e5};for(var str in dates)has.call(dates,str)&&expect(Math.floor(Date.parse(str))).toBe(dates[str]);expect(Date.parse("2034-03-01T00:00:00.000Z")-Date.parse("2034-02-27T23:59:59.999Z")).toBe(86400001)}),it("fixes a Safari 8/9 bug with parsing in UTC instead of local time",function(){var offset=6e4*new Date("2015-07-01").getTimezoneOffset();expect(Date.parse("2015-07-01T00:00:00")).toBe(14357088e5+offset)}),it("should support extended years",function(){expect(Date.parse("0000-01-01T00:00:00.000Z")).toBe(-621672192e5),expect(Date.parse("0001-01-01T00:00:00Z")).toBe(-621355968e5),expect(Date.parse("+275760-09-13T00:00:00.000Z")).toBe(864e13),expect(Date.parse("-271821-04-20T00:00:00.000Z")).toBe(-864e13),expect(Date.parse("+275760-09-13T00:00:00.001Z")).toBeFalsy(),expect(Date.parse("-271821-04-19T23:59:59.999Z")).toBeFalsy(),expect(Date.parse("+033658-09-27T01:46:40.000Z")).toBe(1e15),expect(Date.parse("-000001-01-01T00:00:00Z")).toBe(-621987552e5),expect(Date.parse("+002009-12-15T00:00:00Z")).toBe(12608352e5)}),it("works with timezone offsets",function(){expect(Date.parse("2012-01-29T12:00:00.000+01:00")).toBe(13278348e5),expect(Date.parse("2012-01-29T12:00:00.000-00:00")).toBe(13278384e5),expect(Date.parse("2012-01-29T12:00:00.000+00:00")).toBe(13278384e5),expect(Date.parse("2012-01-29T12:00:00.000+23:59")).toBe(132775206e4),expect(Date.parse("2012-01-29T12:00:00.000-23:59")).toBe(132792474e4),expect(Date.parse("2012-01-29T12:00:00.000+24:00")).toBeFalsy(),expect(Date.parse("2012-01-29T12:00:00.000+24:01")).toBeFalsy(),expect(Date.parse("2012-01-29T12:00:00.000+24:59")).toBeFalsy(),expect(Date.parse("2012-01-29T12:00:00.000+25:00")).toBeFalsy(),expect(Date.parse("2012-01-29T12:00:00.000+00:60")).toBeFalsy(),expect(Date.parse("-271821-04-20T00:00:00.000+00:01")).toBeFalsy(),expect(Date.parse("-271821-04-20T00:01:00.000+00:01")).toBe(-864e13);var tzOffset=Number(new Date(1970,0));expect(Date.parse("1970-01-01T00:00:00")).toBe(tzOffset)}),it("should be able to coerce to a number",function(){var actual=Number(new Date(1970,0)),expected=parseInt(actual,10);expect(actual).toBeDefined(),expect(actual).toBe(expected),expect(isNaN(actual)).toBeFalsy()})}),describe("#toString()",function(){var actual;beforeEach(function(){actual=new Date(1970,0).toString()}),it("should show correct date info for "+actual,function(){expect(actual).toMatch(/1970/),expect(actual).toMatch(/jan/i),expect(actual).toMatch(/thu/i),expect(actual).toMatch(/00:00:00/)})}),describe("#valueOf()",function(){var actual;beforeEach(function(){actual=new Date(1970,0).valueOf()}),it("should give a numeric value",function(){expect(typeof actual).toBe("number")}),it("should not be NaN",function(){expect(isNaN(actual)).toBe(!1)}),it("should give an int value",function(){expect(actual).toBe(Math.floor(actual))})}),describe("#getUTCDate()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date,index){expect(date.getUTCDate()).toBe(item.days[index],date)})})})}),describe("#getUTCDay()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date,index){expect(date.getUTCDay()).toBe(item.getUTCDay[index])})})})}),describe("#getUTCFullYear()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date){expect(date.getUTCFullYear()).toBe(-109252)})})})}),describe("#getUTCMonth()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item,index){item.dates.forEach(function(date){expect(date.getUTCMonth()).toBe(index)})})}),it("should return correct values",function(){expect(new Date(864e13).getUTCMonth()).toBe(8),expect(new Date(0).getUTCMonth()).toBe(0)})}),describe("#getUTCHours()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date){expect(date.getUTCHours()).toBe(11)})})})}),describe("#getUTCMinutes()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date){expect(date.getUTCMinutes()).toBe(59)})})})}),describe("#getUTCSeconds()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date){expect(date.getUTCSeconds()).toBe(59)})})})}),describe("#getUTCMilliseconds()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date){expect(date.getUTCMilliseconds()).toBe(708)})})})}),describe("#getDate()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date,index){expect(date.getDate()).toBe(item.days[index])})})})}),describe("#getDay()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date,index){expect(date.getDay()).toBe(item.getDay[index])})})})}),describe("#getFullYear()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date){expect(date.getFullYear()).toBe(-109252)})})})}),describe("#getMonth()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item,index){item.dates.forEach(function(date){expect(date.getMonth()).toBe(index)})})})}),describe("#getHours()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date){expect(date.getHours()+Math.floor(date.getTimezoneOffset()/60)).toBe(11)})})})}),describe("#getMinutes()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date){var off=date.getTimezoneOffset(),offHours=Math.floor(off/60),offMins=off-60*offHours;expect(date.getMinutes()+offMins).toBe(59)})})})}),describe("#getSeconds()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date,i){expect(i+":"+date.getSeconds()).toMatch(new RegExp(i+":(?:59|1)"))})})})}),describe("#getMilliseconds()",function(){it("should return the right value for negative dates",function(){negativeDate.forEach(function(item){item.dates.forEach(function(date){expect(date.getMilliseconds()).toBe(708)})})})}),describe("#toISOString()",function(){it("should support extended years",function(){expect(new Date(-621987552e5).toISOString().indexOf("-000001-01-01")).toBe(0),expect(new Date(864e13).toISOString().indexOf("+275760-09-13")).toBe(0)}),it("should return correct dates",function(){expect(new Date(-1).toISOString()).toBe("1969-12-31T23:59:59.999Z"),negativeDate.forEach(function(item,index){var m=index+1;item.dates.forEach(function(date,idx){var d=item.days[idx];expect(date.toISOString()).toBe("-109252-"+(10>m?"0"+m:m)+"-"+(10>d?"0"+d:d)+"T11:59:59.708Z")})})})}),describe("#toUTCString()",function(){it("should return correct dates",function(){expect(new Date(-0x55d318d56a724).toUTCString()).toBe("Mon, 01 Jan -45875 11:59:59 GMT")})}),describe("#toDateString()",function(){it("should return correct dates",function(){expect(new Date(-0x55d318d56a724).toDateString()).toBe("Mon Jan 01 -45875")})}),describe("#toString()",function(){it("should return correct dates",function(){var actual=new Date(14496624e5).toString(),re=/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-+]\d\d\d\d(?: |$)/;expect(re.test(actual)).toBe(!0,actual)})}),describe("#toJSON()",function(){it("should call toISOString",function(){var date=new Date(0);date.toISOString=function(){return 1},expect(date.toJSON()).toBe(1)}),it("should return null for not finite dates",function(){var json,date=new Date(0/0);try{json=date.toJSON()}catch(e){expect(e).not.toEqual(jasmine.any(Error))}expect(json).toBe(null)}),it("should return the isoString when stringified",function(){var date=new Date;expect(JSON.stringify(date.toISOString())).toBe(JSON.stringify(date))})})});
!function(angular){"use strict";var AttSchedulerService=angular.module("attSchedulerService",[]),schedulerConts={LastDayOfMonthValue:"L",nowStr:"now"};AttSchedulerService.factory("SchedulerService",["modalService","InvokerService",function(modalService,InvokerService){function getMonthlyDays(){for(var monthlyDays=[],i=1;28>=i;i++)monthlyDays.push(i);return monthlyDays=monthlyDays.map(function(v){return{value:v,name:Utils.getOrdinalNumber(v)}}),monthlyDays.push({value:schedulerConts.LastDayOfMonthValue,name:"Last Day of every month"}),monthlyDays}var Sunday="Sunday",Monday="Monday",Tuesday="Tuesday",Wednesday="Wednesday",Thursday="Thursday",Friday="Friday",Saturday="Saturday",_daysNames=[{value:1,name:Sunday,is_checked:!1},{value:2,name:Monday,is_checked:!0},{value:3,name:Tuesday,is_checked:!0},{value:4,name:Wednesday,is_checked:!0},{value:5,name:Thursday,is_checked:!0},{value:6,name:Friday,is_checked:!0},{value:7,name:Saturday,is_checked:!1}],SchedulerService={data:{currentScheduling:null,schedulingTypes:{ONCE:"Once",EVERY:"Every",DAILY:"Daily",MONTHLY:"Monthly",WEEKLY:"Weekly",ADVANCED:"Advanced"},runEveryOptions:[{type:DO.IntervalTimeUnit.MINUTE,name:"Minute(s)"},{type:DO.IntervalTimeUnit.HOUR,name:"Hour(s)"},{type:DO.IntervalTimeUnit.DAY,name:"Day(s)"}],monthlyDays:getMonthlyDays(),from_now_str:"START_FROM_NOW",from_date_str:"START_FROM_DATE",weekDays:_daysNames,scheduledJob:null},getSchedulingReq:function(context,schedJob,onSuccessCallback){var GetScheduling=function(ctx,scheduledJob,onSuccess){InvokerService.invokeServiceMethod(ctx,"GetScheduling",function(data){SchedulerService.data.scheduledJob=data,SchedulerService.data.currentScheduling=SchedulerService.prepareSchedulingData(data),onSuccess&&onSuccess(!1)},function(errorMessage){if(null==errorMessage||-1==errorMessage.indexOf("REPO-E-OBJNOTFND"))return!0;SchedulerService.data.scheduledJob=scheduledJob;var scheduling_obj=angular.copy(DO.ScheduledJobDto_Defaults);scheduling_obj.scheduling=angular.copy(DO.SchedulePolicy_Defaults),SchedulerService.data.currentScheduling=SchedulerService.prepareSchedulingData(scheduling_obj),onSuccess&&onSuccess(!0)})};context.GetScheduling.onBefore&&angular.isFunction(context.GetScheduling.onBefore)?context.GetScheduling.onBefore(function(){GetScheduling(context,schedJob,onSuccessCallback)}):GetScheduling(context,schedJob,onSuccessCallback)},putSchedulingReq:function(ctx,data,onSuccess,onError){ctx.PutScheduling.params.putData=data,ctx.PutScheduling.onBefore&&angular.isFunction(ctx.PutScheduling.onBefore)?ctx.PutScheduling.onBefore(function(){InvokerService.invokeServiceMethod(ctx,"PutScheduling",onSuccess,onError)}):InvokerService.invokeServiceMethod(ctx,"PutScheduling",onSuccess,onError)},deleteSchedulingReq:function(ctx,onSuccess,onError){ctx.DeleteScheduling.onBefore&&angular.isFunction(ctx.DeleteScheduling.onBefore)?ctx.DeleteScheduling.onBefore(function(){InvokerService.invokeServiceMethod(ctx,"DeleteScheduling",onSuccess,onError)}):InvokerService.invokeServiceMethod(ctx,"DeleteScheduling",onSuccess,onError)},prepareSchedulingData:function(data){var currentScheduling={},scheduling=data[DO.ScheduledJobDto.scheduling];currentScheduling.isDisabled=data[DO.ScheduledJobDto.disabled],currentScheduling.isEnabled=!data[DO.ScheduledJobDto.disabled],currentScheduling.schedulingType=SchedulerService.data.schedulingTypes.DAILY,currentScheduling.weekDays=ObjectUtils.deepClone(SchedulerService.data.weekDays),currentScheduling.startFrom=SchedulerService.data.from_now_str,currentScheduling.interval_unit=ArrayUtils.first(SchedulerService.data.runEveryOptions),currentScheduling.monthDay=ArrayUtils.first(SchedulerService.data.monthlyDays),currentScheduling.interval=5;var defaultDate=new Date;switch(defaultDate.setHours(0),defaultDate.setMinutes(0),currentScheduling.date=defaultDate,scheduling[DO.SchedulePolicy.$type]){case DO.Objects.RunOnceSchedulePolicy:currentScheduling.schedulingType=SchedulerService.data.schedulingTypes.ONCE;var date=Utils.ConvertTicksToDate(scheduling[DO.RunOnceSchedulePolicy.run_once_time]);currentScheduling.runOnceTime=date;break;case DO.Objects.IntervalSchedulePolicy:if(currentScheduling.schedulingType=SchedulerService.data.schedulingTypes.EVERY,currentScheduling.interval_unit=ArrayUtils.find(SchedulerService.data.runEveryOptions,function(it){return it.type==scheduling[DO.IntervalSchedulePolicy.interval_unit]}),currentScheduling.interval=scheduling[DO.IntervalSchedulePolicy.interval],scheduling[DO.IntervalSchedulePolicy.start_time]==schedulerConts.nowStr)currentScheduling.startTime=schedulerConts.nowStr,currentScheduling.startFrom=SchedulerService.data.from_now_str;else{var date=Utils.ConvertTicksToDate(scheduling[DO.IntervalSchedulePolicy.start_time]);currentScheduling.startTime=date,currentScheduling.startFrom=SchedulerService.data.from_date_str}break;case DO.Objects.CronSchedulePolicy:var minutes=parseInt(scheduling[DO.CronSchedulePolicy.minutes]),hours=parseInt(scheduling[DO.CronSchedulePolicy.hours]),months=scheduling[DO.CronSchedulePolicy.months],year=scheduling[DO.CronSchedulePolicy.year],days_of_week=scheduling[DO.CronSchedulePolicy.days_of_week],days_of_month=scheduling[DO.CronSchedulePolicy.days_of_month],date=new Date;date.setHours(hours),date.setMinutes(minutes);var offset=date.getTimezoneOffset(),utcSign=0!=offset?offset/Math.abs(offset)*-1:0;if("*"!=hours&&"*"==months&&"*"==year&&"?"==days_of_week&&"*"==days_of_month)currentScheduling.schedulingType=SchedulerService.data.schedulingTypes.DAILY,currentScheduling.date=Utils.UtcToLocalDate(date);else if("*"!=hours&&"*"==months&&"*"==year&&"?"!=days_of_week&&"?"==days_of_month){currentScheduling.schedulingType=SchedulerService.data.schedulingTypes.WEEKLY;var days_of_week_arr=days_of_week.split(",");ArrayUtils.each(currentScheduling.weekDays,function(d){d.is_checked=!1}),currentScheduling.date=Utils.UtcToLocalDate(date);var daysDelta=Utils.isSameDay(currentScheduling.date,date)?0:1;ArrayUtils.each(days_of_week_arr,function(d){var localDay=parseInt(d)+utcSign*daysDelta;8==localDay&&(localDay=1),0>=localDay&&(localDay=7),localDay-=1,currentScheduling.weekDays[localDay].is_checked=!0})}else if("*"!=hours&&"*"==months&&"*"==year&&"?"==days_of_week&&"*"!=days_of_month){currentScheduling.schedulingType=SchedulerService.data.schedulingTypes.MONTHLY;var lastDayIndex=SchedulerService.data.monthlyDays.length-1,dayIndex=0;currentScheduling.date=Utils.UtcToLocalDate(date);var daysDelta=Utils.isSameDay(currentScheduling.date,date)?0:1;if(days_of_month==schedulerConts.LastDayOfMonthValue)dayIndex=lastDayIndex+daysDelta*utcSign,dayIndex>lastDayIndex&&(dayIndex=0);else if(1==days_of_month)dayIndex=daysDelta*utcSign,0>dayIndex&&(dayIndex=lastDayIndex);else{days_of_month=parseInt(days_of_month),date.setDate(days_of_month);var monthlyDate=Utils.UtcToLocalDate(date);dayIndex=monthlyDate.getDate()-1}currentScheduling.monthDay=SchedulerService.data.monthlyDays[dayIndex]}break;case DO.Objects.CronExpressionSchedulePolicy:currentScheduling.schedulingType=SchedulerService.data.schedulingTypes.ADVANCED,currentScheduling.cronExpression=scheduling[DO.CronExpressionSchedulePolicy.cron_expression]}return currentScheduling},prepareServerSchedulingObj:function(){var retObj;switch(SchedulerService.data.scheduledJob[DO.ScheduledJobDto.disabled]=!SchedulerService.data.currentScheduling.isEnabled,SchedulerService.data.currentScheduling.schedulingType){case SchedulerService.data.schedulingTypes.ONCE:retObj=angular.copy(DO.RunOnceSchedulePolicy_Defaults),SchedulerService.data.currentScheduling.runOnceTime.setSeconds(0),retObj[DO.RunOnceSchedulePolicy.run_once_time]=Utils.ConvertDateToTicks(SchedulerService.data.currentScheduling.runOnceTime);break;case SchedulerService.data.schedulingTypes.EVERY:retObj=angular.copy(DO.IntervalSchedulePolicy_Defaults),retObj[DO.IntervalSchedulePolicy.interval_unit]=SchedulerService.data.currentScheduling.interval_unit.type,retObj[DO.IntervalSchedulePolicy.interval]=SchedulerService.data.currentScheduling.interval,SchedulerService.data.currentScheduling.startFrom==SchedulerService.data.from_now_str?retObj[DO.IntervalSchedulePolicy.start_time]=schedulerConts.nowStr:(SchedulerService.data.currentScheduling.startTime.setSeconds(0),retObj[DO.IntervalSchedulePolicy.start_time]=Utils.ConvertDateToTicks(SchedulerService.data.currentScheduling.startTime));break;case SchedulerService.data.schedulingTypes.DAILY:case SchedulerService.data.schedulingTypes.MONTHLY:case SchedulerService.data.schedulingTypes.WEEKLY:var offset=(new Date).getTimezoneOffset(),utcSign=0!=offset?offset/Math.abs(offset):0,daysDelta=Utils.isSameDay(Utils.LocalDateToUtc(SchedulerService.data.currentScheduling.date),SchedulerService.data.currentScheduling.date)?0:1;if(retObj=angular.copy(DO.CronSchedulePolicy_Defaults),retObj[DO.CronSchedulePolicy.minutes]=SchedulerService.data.currentScheduling.date.getUTCMinutes(),retObj[DO.CronSchedulePolicy.hours]=SchedulerService.data.currentScheduling.date.getUTCHours(),SchedulerService.data.currentScheduling.schedulingType==SchedulerService.data.schedulingTypes.WEEKLY){var days=[];ArrayUtils.each(SchedulerService.data.currentScheduling.weekDays,function(d,index){if(d.is_checked){var utcDay=parseInt(index)+utcSign*daysDelta+1;8==utcDay&&(utcDay=1),0>=utcDay&&(utcDay=7),days.push(utcDay)}}),retObj[DO.CronSchedulePolicy.days_of_week]=days.join(","),retObj[DO.CronSchedulePolicy.days_of_month]="?"}else if(SchedulerService.data.currentScheduling.schedulingType==SchedulerService.data.schedulingTypes.MONTHLY){if(SchedulerService.data.currentScheduling.monthDay.value==schedulerConts.LastDayOfMonthValue){var lastDayIndex=SchedulerService.data.monthlyDays.length-2,offset=utcSign*daysDelta;retObj[DO.CronSchedulePolicy.days_of_month]=0>offset?SchedulerService.data.monthlyDays[lastDayIndex].value:offset>0?SchedulerService.data.monthlyDays[0].value:SchedulerService.data.currentScheduling.monthDay.value}else{var dayOfMonth=parseInt(SchedulerService.data.currentScheduling.monthDay.value)+utcSign*daysDelta;retObj[DO.CronSchedulePolicy.days_of_month]=0==dayOfMonth?ArrayUtils.last(SchedulerService.data.monthlyDays).value:dayOfMonth}retObj[DO.CronSchedulePolicy.days_of_week]="?"}break;case SchedulerService.data.schedulingTypes.ADVANCED:retObj=angular.copy(DO.CronExpressionSchedulePolicy_Defaults),retObj[DO.CronExpressionSchedulePolicy.cron_expression]=SchedulerService.data.currentScheduling.cronExpression}return retObj},showSchedulingPopup:function(ctx,name,newSchedObj){SchedulerService.getSchedulingReq(ctx,newSchedObj,function(is_new){var model={secondOptionOkDisabled:is_new,okDisabled:!0};modalService.showModal({contentTemplate:"scripts/angular.common/att_services/scheduler/scheduler.html",headerText:"Scheduler - "+name,resizable:!1,okDisabledProp:function(){var disabled=!1;if(SchedulerService.data.currentScheduling.schedulingType===SchedulerService.data.schedulingTypes.WEEKLY){const i=ArrayUtils.filter(SchedulerService.data.currentScheduling.weekDays,function(it){return it.is_checked});disabled=0===i.length}return SchedulerService.data.currentScheduling.schedulingType===SchedulerService.data.schedulingTypes.ADVANCED&&(disabled=null==SchedulerService.data.currentScheduling.cronExpression||""===SchedulerService.data.currentScheduling.cronExpression),disabled},secondOptionActionButtonText:"Delete",secondOptionOkDisabledProp:"secondOptionOkDisabled",model:model,onBeforeSecondOptionOk:function(vm,okCallback){vm.secondOptionOkDisabled=!0,SchedulerService.deleteSchedulingReq(ctx),okCallback&&okCallback()},onBeforeOk:function(vm,okCallback){SchedulerService.data.scheduledJob[DO.ScheduledJobDto.scheduling]=SchedulerService.prepareServerSchedulingObj(),SchedulerService.putSchedulingReq(ctx,SchedulerService.data.scheduledJob,function(){okCallback&&okCallback()})}},{windowClass:"SchedulerPopup"})})},getSchedulingAsString:function(scheduledJob){if(!scheduledJob)return"";var sched_obj=SchedulerService.prepareSchedulingData(scheduledJob),h=sched_obj.date.getHours(),m=sched_obj.date.getMinutes(),NEW_LINE="\n",sched_string="";if(null!=sched_obj)if(sched_obj.schedulingType===SchedulerService.data.schedulingTypes.ADVANCED)sched_string+="Advanced: "+sched_obj.cronExpression+NEW_LINE;else if(sched_obj.schedulingType===SchedulerService.data.schedulingTypes.ONCE)sched_string+="On: "+sched_obj.runOnceTime.toString()+NEW_LINE;else if(sched_obj.schedulingType===SchedulerService.data.schedulingTypes.EVERY)sched_string+=" "+String(sched_obj.interval)+" "+sched_obj.interval_unit.name+NEW_LINE,0!=sched_obj.startTime&&(sched_string+="Starting from date: "+sched_obj.startTime.toString());else if(sched_obj.schedulingType===SchedulerService.data.schedulingTypes.DAILY)sched_string+="At: "+Utils.pad(h)+":"+Utils.pad(m)+NEW_LINE;else if(sched_obj.schedulingType===SchedulerService.data.schedulingTypes.WEEKLY){var days_of_week_arr=[];ArrayUtils.each(sched_obj.weekDays,function(day){day.is_checked&&days_of_week_arr.push(day.name.substr(0,3))});var days_of_week=days_of_week_arr.join(", ");sched_string+="On: "+days_of_week+NEW_LINE,sched_string+="At: "+Utils.pad(h)+":"+Utils.pad(m)+NEW_LINE}else sched_obj.schedulingType===SchedulerService.data.schedulingTypes.MONTHLY&&(sched_string+="On: "+sched_obj.monthDay.name+NEW_LINE,sched_string+="At: "+Utils.pad(h)+":"+Utils.pad(m)+NEW_LINE);return sched_string}};return SchedulerService}]),AttSchedulerService.controller("SchedulerCtrl",["SchedulerService","$scope",function(SchedulerService,$scope){$scope.currentScheduling=SchedulerService.data.currentScheduling,$scope.schedulingTypes=[],ObjectUtils.forOwn(SchedulerService.data.schedulingTypes,function(key,val){$scope.schedulingTypes.push(val)}),$scope.from_now_str=SchedulerService.data.from_now_str,$scope.from_date_str=SchedulerService.data.from_date_str,$scope.runEveryOptions=SchedulerService.data.runEveryOptions,$scope.monthlyDays=SchedulerService.data.monthlyDays,null!=$scope.currentScheduling&&($scope.currentScheduling.isEnabled=!SchedulerService.data.currentScheduling.isDisabled)}])}(angular);
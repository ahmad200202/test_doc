!function(angular){"use strict";{var logConfigDirectives=(angular.module("attLogConfig",["attLogConfigDirectives"]).provider("loggersConfig",[function(){return{setConvertLogLevelToSliderValue:function(convertLogLevelToSliderValue){this.convertLogLevelToSliderValue=convertLogLevelToSliderValue},setConvertSliderValueToLogLevel:function(convertSliderValueToLogLevel){this.convertSliderValueToLogLevel=convertSliderValueToLogLevel},setLogLevels:function(logLevels){this.logLevels=logLevels},setCheckVersionPolicyLogOnDemand:function(checkVersionPolicyLogOnDemand){this.checkVersionPolicyLogOnDemand=checkVersionPolicyLogOnDemand},setSeveritiesToHide:function(severitiesToHide){this.severitiesToHide=severitiesToHide},setExcludeLoggerValues:function(excludeLoggerValues){this.excludeLoggerValues=excludeLoggerValues},$get:function(){return{convertLogLevelToSliderValue:this.convertLogLevelToSliderValue,convertSliderValueToLogLevel:this.convertSliderValueToLogLevel,severitiesToHide:this.severitiesToHide,excludeLoggerValues:this.excludeLoggerValues,logLevels:this.logLevels,checkVersionPolicyLogOnDemand:this.checkVersionPolicyLogOnDemand}}}}]),angular.module("attLogConfigDirectives",[]));angular.module("attLogConfigController",[])}logConfigDirectives.directive("loggersConfiguration",["locale","loggersConfig","$filter",function(locale,loggersConfig,$filter){return{restrict:"E",replace:!0,scope:{loggers:"=",onLoggerChanged:"&",api:"=?",globalLoggerName:"=",logLevelInstruction:"=?"},templateUrl:"scripts/angular.common/attLoggersConfig/loggersConfigTemplate.html",controller:["$scope","locale",function($scope,locale){$scope.loggerSeverities=[],$scope.loggersTxtValDictionary={},$scope.prevValue=0;var txtPrefix=locale.getString("common.loggersConfig.LoggerSeverityPrefix"),prevLoggerLabelText="";$scope.titlesTexts={},$scope.isVersionOkForLogOnDemand=!0,angular.forEach(loggersConfig.logLevels,function(val){var loggerLabelText=locale.getString("common.loggersConfig."+txtPrefix+val),sliderVal=loggersConfig.convertLogLevelToSliderValue(val);if($scope.loggersTxtValDictionary[sliderVal]=loggerLabelText,loggersConfig.severitiesToHide.indexOf(val)<0){prevLoggerLabelText.length>0&&(prevLoggerLabelText=prevLoggerLabelText.replace(" Only",""),prevLoggerLabelText+=", "),prevLoggerLabelText+=loggerLabelText,$scope.titlesTexts[$scope.loggerSeverities.length]=prevLoggerLabelText;var severityItem={text:loggerLabelText,val:val,title:$scope.titlesTexts[$scope.loggerSeverities.length]};$scope.loggerSeverities.push(severityItem)}}),$scope.slider={options:{slide:function(event,ui){return null!=ui.handle.parentNode&&"globalLogger"==ui.handle.parentNode.id&&loggersConfig.severitiesToHide.indexOf(ui.value)>-1?!1:void 0},start:function(event,ui){$scope.prevValue=ui.value},stop:function(event,ui){if(null!=ui.handle.parentNode&&"globalLogger"==ui.handle.parentNode.id){if(ui.value==$scope.prevValue)return;angular.forEach($scope.loggersModel,function(logger){logger.logValue=ui.value,logger.title=$scope.loggersTxtValDictionary[ui.value]}),$scope.notifyHostingApplication($scope.globalLoggerName,ui.value)}else{var changedLogger=_.find($scope.loggersModel,function(item){return item.logName==ui.handle.parentNode.id});changedLogger.title=$scope.loggersTxtValDictionary[ui.value],$scope.notifyHostingApplication(ui.handle.parentNode.id,ui.value)}$scope.$apply()}}},$scope.notifyHostingApplication=function(logName,logVal){if(angular.isDefined($scope.onLoggerChanged)&&angular.isDefined($scope.onLoggerChanged())){var logLevelVal=loggersConfig.convertSliderValueToLogLevel(logVal);$scope.onLoggerChanged()(logName,logLevelVal)}},$scope.prepareLoggersData=function(){null==loggersConfig.checkVersionPolicyLogOnDemand&&(loggersConfig.checkVersionPolicyLogOnDemand=!1),DO[$scope.loggers.$type]&&null!=DO[$scope.loggers.$type+"_Types"].loggers_configuration&&null==$scope.loggers.loggers_configuration&&($scope.loggers.loggers_configuration=Utils.createNewDefaultObject(DO[$scope.loggers.$type+"_Types"].loggers_configuration)),$scope.isVersionOkForLogOnDemand=loggersConfig.checkVersionPolicyLogOnDemand===!0?!0:!0,angular.forEach($scope.loggers,function(value,key){if("$type"!=key&&key!=$scope.globalLoggerName&&"LogLevel"==DO[$scope.loggers.$type+"_Types"][key]){var logVal=loggersConfig.convertLogLevelToSliderValue(value);-1==logVal&&(logVal=$scope.globalLoggerModel);var logModel={logName:key,logValue:logVal,title:$scope.loggersTxtValDictionary[logVal]};$scope.loggersModel.push(logModel)}}),$scope.loggersModel=$filter("attOrderBy")($scope.loggersModel,"logName")},$scope.getSliderMaxVal=function(){var numberOfValues=Object.keys(loggersConfig.logLevels).length,numberOfExcludedValues=loggersConfig.excludeLoggerValues.length;return numberOfValues-numberOfExcludedValues-1},$scope.getLabelWidth=function(){var numberOfValues=Object.keys(loggersConfig.logLevels).length,numberOfExcludedValues=loggersConfig.excludeLoggerValues.length,itemsOnSlider=numberOfValues-numberOfExcludedValues,res={};return res.width=100/itemsOnSlider+"%",res}}],link:function(scope){function setLoggerData(loggersData){scope.loggersModel.length>0&&ArrayUtils.emptyArray(scope.loggersModel),scope.globalLoggerModel=loggersConfig.convertLogLevelToSliderValue(loggersData[scope.globalLoggerName]),scope.prepareLoggersData()}scope.api||(scope.api={}),null==scope.logLevelInstruction&&(scope.logLevelInstruction=locale.getString("common.loggersConfig.SetLogLevelInstruction")),scope.loggersModel=[],setLoggerData(scope.loggers),scope.api.resetLoggersData=function(loggers){scope.loggers=loggers,setLoggerData(loggers)}}}}])}(angular);
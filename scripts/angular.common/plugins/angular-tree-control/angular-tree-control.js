!function(angular){"use strict";angular.module("treeControl",[]).directive("treecontrol",["$compile","$timeout","$filter",function($compile){function classIfDefined(cssClass,addClassProperty){return cssClass?addClassProperty?'class="'+cssClass+'"':cssClass:""}function ensureDefault(obj,prop,value){obj.hasOwnProperty(prop)||(obj[prop]=value)}return{restrict:"EA",require:"treecontrol",transclude:!0,scope:{treeModel:"=",selectedNode:"=?",expandedNodes:"=?",onSelection:"&",onNodeToggle:"&",hasSelectionGetter:"&hasSelection",options:"=?",orderBy:"@",reverseOrder:"@",filterExpression:"=?",filterComparator:"=?"},controller:["$scope","$filter",function($scope,$filter){function defaultIsLeaf(node){var isLeafRes=!node[$scope.options.nodeChildren]||0===node[$scope.options.nodeChildren].length||0==$filter("filter")(node[$scope.options.nodeChildren],$scope.filterExpression).length;return isLeafRes}function defaultEquality(a,b){return void 0===a||void 0===b?!1:(a=angular.copy(a),a[$scope.options.nodeChildren]=[],b=angular.copy(b),b[$scope.options.nodeChildren]=[],angular.equals(a,b))}$scope.options=$scope.options||{},ensureDefault($scope.options,"nodeChildren","children"),ensureDefault($scope.options,"dirSelectable","true"),ensureDefault($scope.options,"injectClasses",{}),ensureDefault($scope.options.injectClasses,"ul",""),ensureDefault($scope.options.injectClasses,"li",""),ensureDefault($scope.options.injectClasses,"liSelected",""),ensureDefault($scope.options.injectClasses,"iExpanded",""),ensureDefault($scope.options.injectClasses,"iCollapsed",""),ensureDefault($scope.options.injectClasses,"iLeaf",""),ensureDefault($scope.options.injectClasses,"label",""),ensureDefault($scope.options.injectClasses,"labelSelected",""),ensureDefault($scope.options,"equality",defaultEquality),ensureDefault($scope.options,"isLeaf",defaultIsLeaf);var orderByToken="";null!=$scope.orderBy&&(orderByToken="|orderBy:orderBy"),$scope.expandedNodes=$scope.expandedNodes||[],$scope.expandedNodesMap={};for(var i=0;i<$scope.expandedNodes.length;i++)$scope.expandedNodesMap[""+i]=$scope.expandedNodes[i];$scope.parentScopeOfTree=$scope.$parent,$scope.hasSelection=$scope.hasSelectionGetter(),$scope.headClass=function(node){var returnClass="",liSelectionClass=classIfDefined($scope.options.injectClasses.liSelected,!1),injectSelectionClass="";return liSelectionClass&&$scope.options.equality(this.node,$scope.selectedNode)&&(injectSelectionClass=" "+liSelectionClass),returnClass=$scope.options.isLeaf(node)?"tree-leaf"+injectSelectionClass:$scope.expandedNodesMap[this.$id]||this.node[$scope.options.expandedProp]?"tree-expanded"+injectSelectionClass:"tree-collapsed"+injectSelectionClass},$scope.iBranchClass=function(){return classIfDefined($scope.expandedNodesMap[this.$id]?$scope.options.injectClasses.iExpanded:$scope.options.injectClasses.iCollapsed)},$scope.nodeExpanded=function(){return!!$scope.expandedNodesMap[this.$id]||$scope.options.expandAll&&!this.touched||this.node[$scope.options.expandedProp]},$scope.selectNodeHead=function(){$scope.options.expandAll=!1;var expanding=void 0===$scope.expandedNodesMap[this.$id];if(!this.touched&&this.node[$scope.options.expandedProp]&&(expanding=!1),$scope.options.expandedProp&&(this.node[$scope.options.expandedProp]=!this.node[$scope.options.expandedProp],expanding=this.node[$scope.options.expandedProp]),this.touched=!0,$scope.expandedNodesMap[this.$id]=expanding?this.node:void 0,expanding)$scope.expandedNodes.push(this.node);else{for(var index,i=0;i<$scope.expandedNodes.length&&!index;i++)$scope.options.equality($scope.expandedNodes[i],this.node)&&(index=i);void 0!=index&&$scope.expandedNodes.splice(index,1)}$scope.onNodeToggle&&$scope.onNodeToggle({node:this.node,expanded:expanding})},$scope.selectNodeLabel=function(selectedNode){selectedNode[$scope.options.nodeChildren]&&selectedNode[$scope.options.nodeChildren].length>0&&!$scope.options.dirSelectable||$scope.selectedNode!=selectedNode&&($scope.selectedNode=selectedNode,$scope.onSelection&&$scope.onSelection({node:$scope.selectedNode}))},$scope.selectedClass=function(){var labelSelectionClass=classIfDefined($scope.options.injectClasses.labelSelected,!1),injectSelectionClass="";return labelSelectionClass&&this.node==$scope.selectedNode&&(injectSelectionClass=" "+labelSelectionClass),this.node==$scope.selectedNode?"tree-selected"+injectSelectionClass:""};var template="<ul "+classIfDefined($scope.options.injectClasses.ul,!0)+'><li ng-repeat="node in node.'+$scope.options.nodeChildren+" | filter:filterExpression:filterComparator"+orderByToken+'" ng-class="headClass(node)" '+classIfDefined($scope.options.injectClasses.li,!0)+'><i class="tree-branch-head" ng-class="iBranchClass()" ng-click="selectNodeHead(node)"></i><i class="tree-leaf-head '+classIfDefined($scope.options.injectClasses.iLeaf,!1)+'"></i><div class="tree-label '+classIfDefined($scope.options.injectClasses.label,!1)+'" ng-class="selectedClass()" ng-click="selectNodeLabel(node)" tree-transclude></div><treeitem ng-if="nodeExpanded()"></treeitem></li></ul>';this.template=$compile(template)}],compile:function(element,attrs,childTranscludeFn){return function(scope,element,attrs,treemodelCntr){scope.deferRendering=!1,scope.deferRenderingChunckSize=5,scope.remainingDefered=[],null!=attrs.deferRenderingChunk&&(scope.deferRendering=!0,scope.deferRenderingChunckSize=parseInt(attrs.deferRenderingChunk)),"true"==attrs.deferRendering&&(scope.deferRendering=!0),scope.$watch("treeModel",function(newValue){if(angular.isArray(newValue)){if(angular.isDefined(scope.node)&&angular.equals(scope.node[scope.options.nodeChildren],newValue))return;if(scope.node={},scope.synteticRoot=scope.node,scope.deferRendering){scope.node[scope.options.nodeChildren]=[];var takeSome=function(targetArr,srcArr,chunkSize,remainingArr){scope.$evalAsync(function(){if(srcArr.length>chunkSize){var toPush=srcArr.splice(0,chunkSize);remainingArr.length=0,Array.prototype.push.apply(remainingArr,newValue),Array.prototype.push.apply(targetArr,toPush)}remainingArr.length>0&&setTimeout(function(){takeSome(targetArr,srcArr,chunkSize,remainingArr)},100)})};if(newValue.length>scope.deferRenderingChunckSize){var newArr=[];Array.prototype.push.apply(newArr,newValue),takeSome(scope.node[scope.options.nodeChildren],newArr,scope.deferRenderingChunckSize,scope.remainingDefered)}else scope.node[scope.options.nodeChildren]=newValue}else scope.node[scope.options.nodeChildren]=newValue}else{if(angular.equals(scope.node,newValue))return;scope.node=newValue}}),scope.$treeTransclude=childTranscludeFn,scope.$evalAsync(function(){treemodelCntr.template(scope,function(clone){element.html("").append(clone)})})}}}}]).directive("treeitem",function(){return{restrict:"E",require:"^treecontrol",link:function(scope,element,attrs,treemodelCntr){scope.$evalAsync(function(){treemodelCntr.template(scope,function(clone){element.html("").append(clone)})})}}}).directive("treeTransclude",function(){return{link:function(scope,element){scope.options.isLeaf(scope.node)||angular.forEach(scope.expandedNodesMap,function(node,id){scope.options.equality(node,scope.node)&&(scope.expandedNodesMap[scope.$id]=scope.node,scope.expandedNodesMap[id]=void 0)}),scope.options.equality(scope.node,scope.selectedNode)&&(scope.selectedNode=scope.node),scope.transcludeScope=scope.parentScopeOfTree.$new(),scope.$evalAsync(function(){scope.transcludeScope.node=scope.node,scope.transcludeScope.$parentNode=scope.$parent.node===scope.synteticRoot?null:scope.$parent.node,scope.transcludeScope.$index=scope.$index,scope.transcludeScope.$first=scope.$first,scope.transcludeScope.$middle=scope.$middle,scope.transcludeScope.$last=scope.$last,scope.transcludeScope.$odd=scope.$odd,scope.transcludeScope.$even=scope.$even,scope.$on("$destroy",function(){scope.transcludeScope.$destroy()}),scope.$treeTransclude(scope.transcludeScope,function(clone){element.empty(),element.append(clone)})})}}})}(angular);
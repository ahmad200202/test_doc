!function(){"use strict";function _getAttributes(elem){var res={};return ArrayUtils.each(elem.attributes,function(attr){var camelCased=attr.name.replace(/-([a-z])/g,function(g){return g[1].toUpperCase()});"data-disabled"==attr.name&&(camelCased=attr.name),res[camelCased]=attr.value}),res}angular.module("AttFormValidation",[]).directive("formValidation",["$compile","$parse","formValidationHelper","ValidationService","VersionPolicyService",function($compile,$parse,formValidationHelper,ValidationService,VersionPolicyService){return{restrict:"A",scope:!1,priority:500,terminal:!0,compile:function(el,attrs){var _this=this;return function(scope,elem,attr){var validationSrc=$parse(attr.formValidation)(scope),validationOverride=$parse(attr.validationOverride)(scope),validationConfig={};validationConfig.validations={};var validationModel=attr.modelToValidate;validationModel=validationModel.replaceAll(".","_");var errorIndicatorSelector=attrs.errorIndicatorSelector,multiFormValidation="true"==attrs.multiFormValidation;validationConfig.validations[validationModel]=angular.copy(null==validationSrc?DO[attr.formValidation+"_Validation"]:validationSrc),validationConfig.validations[validationModel]=$.extend(!0,validationConfig.validations[validationModel],validationOverride),elem.removeAttr("model-to-validate"),elem.removeAttr("form-validation"),elem.attr("novalidate","novalidate");var formName=elem.attr("name");if(validationConfig.validations[validationModel]){elem.attr("ng-class","{FormTriggered:"+formName+".$customValidationTriggered}"),scope.modalOptions&&(scope.modalOptions.isValid=function(triggerValidation){return triggerValidation&&(scope[formName].$customValidationTriggered=!0),scope[formName]&&ValidationService.isValidExcludeIgnores(formName,scope)});var validationOptions={validationTrigger:elem.attr("validation-trigger"),modelToValidate:attr.modelToValidate};validationConfig&&_this.findFormElements(elem.children(),validationConfig,formName,validationOptions)}$compile(elem)(scope),scope.ValidationAPI={},scope.ValidationAPI.addValidation=function(controlName,validationObj){scope.ValidationAPI.removeValidation(controlName);var pElem=$(elem).find("[name="+controlName+"]");_this.addAttributes(pElem,validationObj,validationOptions);var msgs=_this.addValidationMsgs(pElem,validationObj,formName);$compile(pElem)(scope),$compile(msgs)(scope),pElem.off("keypress").on("keypress",function(){scope[formName][controlName].$setDirty()})},scope.ValidationAPI.removeValidation=function(controlName){var validations=["required","max","min","maxlength","minlength","pattern","url"],pElem=$(elem).find("[name="+controlName+"]");pElem.removeClass("ng-invalid");for(var i=0;i<validations.length;i++)pElem.removeAttr("ng-"+validations[i]),pElem.removeAttr(validations[i]),pElem.removeClass("ng-invalid-"+validations[i])},scope.$watch(formName+".$invalid",function(newVal,oldVal){newVal!=oldVal&&(newVal?$(errorIndicatorSelector).show():$(errorIndicatorSelector).hide())}),scope.id=Utils.createGuid(),scope[formName].id=scope.id,ValidationService.setForm(formName,scope[formName],multiFormValidation),scope.$on("$destroy",function(objForm){var formInfoObj=ValidationService.data.formsInfo[formName];if(formInfoObj&&formInfoObj.isMultiFormValidation){var destroyedFormId=objForm.currentScope.id;ArrayUtils.removeElementByNestedProperty(ValidationService.data.forms[formName],"id",destroyedFormId)}else ValidationService.data.forms[formName]=null;ValidationService.removeDependencies(formName)}),null!=attrs.affects&&ValidationService.addFormToDependencies(formName,attrs.affects)}},findFormElements:function(elements,validationConfig,formName,validationOptions){var _this=this;angular.forEach(elements,function(element){var jqElm=angular.element(element);if(element&&element.tagName&&element.tagName.toLowerCase()===VersionPolicyService.Const.ATT_FIELD_TAG){var attributes=_getAttributes(element);null==attributes.model&&(attributes.model=validationOptions.modelToValidate);var tpl=VersionPolicyService.elemTemplate(jqElm,attributes);jqElm.empty(),jqElm.append(tpl),jqElm.attr(VersionPolicyService.Const.COMPILED,"true")}var modelAttr=jqElm.attr("ng-model")||jqElm.attr("data-ng-model");modelAttr&&_this.processElement(jqElm,modelAttr,validationConfig,formName,validationOptions),_this.findFormElements(jqElm.children(),validationConfig,formName,validationOptions)})},processElement:function(jqElm,nameAttr,validationConfig,formName,validationOptions){if(!jqElm.attr("name")){var newAttrName=nameAttr.substring(nameAttr.lastIndexOf(".")+1);"]"==newAttrName[newAttrName.length-1]&&(newAttrName=newAttrName.substr(0,newAttrName.length-1)),jqElm.attr("name",newAttrName)}this.addValidations(jqElm,nameAttr,validationConfig,formName,validationOptions)},addValidations:function(jqElm,modelValue,validationConfig,formName,validationOptions){var parts,name;modelValue.indexOf(".")>-1&&(parts=modelValue.split("."));var modelName=validationOptions.modelToValidate.replaceAll(".","_"),propName=modelValue.replace(validationOptions.modelToValidate,"");if(propName.indexOf("[")>=0&&propName.indexOf("]")>=0&&propName.indexOf("DO")>=0)try{propName=eval(propName.replace("[","").replace("]",""))}catch(e){propName=null}else propName=propName;var modelValidations=null;try{modelValidations=validationConfig.validations[modelName][propName],modelValidations||(modelValidations=ObjectUtils.get(validationConfig.validations,modelName+propName))}catch(e){try{modelValidations=ObjectUtils.get(validationConfig.validations,modelName+propName)}catch(e){modelValidations=null}}modelValidations&&(this.addAttributes(jqElm,modelValidations,validationOptions),this.addValidationMsgs(jqElm,modelValidations,formName));var globals=validationConfig.globals;globals&&this.addAttributes(jqElm,globals,modelValidations,validationConfig)},addAttributes:function(jqElm,attrs,validationOptions){for(var name in attrs){"required"!==name?("pattern"==name&&ObjectUtils.kindOf(attrs[name],"String")&&(attrs[name]=new RegExp(attrs[name])),jqElm.attr("ng-"+name.toLocaleLowerCase(),attrs[name])):jqElm.attr("ng-"+name.toLocaleLowerCase(),attrs[name]);var elmValidationTrigger=jqElm.attr("validation-trigger");elmValidationTrigger?jqElm.attr("ng-model-options",'{updateOn:"'+elmValidationTrigger+'"}'):validationOptions.validationTrigger&&jqElm.attr("ng-model-options",'{updateOn:"'+validationOptions.validationTrigger+'"}')}},addValidationMsgs:function(jqElm,validations,formName){if(validations){var placementStrategy=jqElm.attr("placementStrategy")||formValidationHelper.defaultErrorPlacementStrategy,elemName=jqElm.attr("name"),errorLabel=jqElm.attr("errLabel")||elemName,msgsContainer=formValidationHelper.errorPlacementStrategies[placementStrategy](jqElm);for(var validation in validations)if(formValidationHelper.validationMessages[validation]){var msg,msgElm,spesMsg=jqElm.attr(validation+"-error-message");msg=formValidationHelper.stringFormat(formValidationHelper.validationMessages[validation],errorLabel,validations[validation]),msg=spesMsg||msg;var formElem=formName+"."+elemName;msgElm=angular.element('<div class="validation-error" ng-show="!'+formElem+".$$ignoreValidation &&"+formElem+".$error."+validation.toLocaleLowerCase()+" &&("+formElem+".$dirty || "+formName+'.$customValidationTriggered)">'+msg+"</div>"),msgsContainer.append(msgElm)}return msgsContainer}}}}]),angular.module("AttFormValidation").directive("ignoreValidation",[function(){return{restrict:"A",link:function(scope,elem,attrs){var parentForm=elem.parents("form").attr("name"),elemName=elem.attr("name");parentForm&&elemName&&attrs.$observe("ignoreValidation",function(newVal){scope[parentForm][elemName].$$ignoreValidation="true"==newVal,scope[parentForm][elemName].$$ignoreValidation?elem.addClass("ignoreValidation"):elem.removeClass("ignoreValidation")})}}}]),angular.module("AttFormValidation").factory("ValidationService",[function(){function _setDirty(formObj,fieldName){formObj&&formObj[fieldName]&&formObj[fieldName].$setDirty()}function _setUntouched(formObj,fieldName){formObj&&formObj[fieldName]&&formObj[fieldName].$setUntouched()}var ValidationService={data:{forms:{},formsInfo:{},dependencies:{}},isValid:function(formName){return ValidationService.data.forms[formName]?ValidationService.isValidExcludeIgnores(formName)&&ValidationService.isDependentFormsValid(formName):null},isSingleFormValid:function(form){var res=!0;return ObjectUtils.forOwn(form.$error,function(key,val){ArrayUtils.each(val,function(it){return it.$invalid&&!it.$$ignoreValidation?void(res=!1):void 0}),0==res}),res},isValidExcludeIgnores:function(formName,scope){var form;if(form=scope?scope[formName]:ValidationService.data.forms[formName],!form)return!0;var res=!0;return ValidationService.data.formsInfo[formName]&&ValidationService.data.formsInfo[formName].isMultiFormValidation?ArrayUtils.each(ValidationService.data.forms[formName],function(formObj){return ValidationService.isSingleFormValid(formObj)?void 0:void(res=!1)}):res=ValidationService.isSingleFormValid(form),res},isDependentFormsValid:function(formName){for(var res=!0,i=0;ValidationService.data.dependencies[formName]&&i<ValidationService.data.dependencies[formName].length;i++)if(!ValidationService.isValid(ValidationService.data.dependencies[formName][i])){res=!1;break}return res},removeDependencies:function(formName){ValidationService.data.dependencies[formName]=null},addFormToDependencies:function(formName,affectedFormName){null==ValidationService.data.dependencies[affectedFormName]&&(ValidationService.data.dependencies[affectedFormName]=[]),ArrayUtils.insert(ValidationService.data.dependencies[affectedFormName],formName)},setDirty:function(formName,fieldName){ValidationService.data.formsInfo[formName]&&ValidationService.data.formsInfo[formName].isMultiFormValidation?ArrayUtils.each(ValidationService.data.forms[formName],function(formObj){_setDirty(formObj,formName)}):_setDirty(ValidationService.data.forms[formName],fieldName)},setForm:function(formName,formObj,isMultiFormValidation){formName&&(ValidationService.data.formsInfo[formName]={isMultiFormValidation:isMultiFormValidation},ValidationService.data.formsInfo[formName].isMultiFormValidation?(null==ValidationService.data.forms[formName]&&(ValidationService.data.forms[formName]=[]),ValidationService.data.forms[formName].push(formObj)):ValidationService.data.forms[formName]=formObj)},setValidity:function(formName,fieldName,validationType,isValid){var formObj=ValidationService.data.forms[formName];formObj&&fieldName&&formObj[fieldName]&&formObj[fieldName].$setValidity&&formObj[fieldName].$setValidity(validationType,isValid)},setUntouched:function(formName,fieldName){ValidationService.data.formsInfo[formName].isMultiFormValidation?ArrayUtils.each(ValidationService.data.forms[formName],function(formObj){_setUntouched(formObj,fieldName)}):_setUntouched(ValidationService.data.forms[formName],fieldName)}};return ValidationService}]),angular.module("AttFormValidation").directive("errorMessageContainer",["formValidationHelper",function(){}]),angular.module("AttFormValidation").directive("ngUnique",["$parse",function($parse){return{require:"ngModel",link:function(scope,ele,attrs,c){function getValOrDefault(val,defaultVal){return void 0==val||""!=defaultVal&&""==val?defaultVal:val}scope.$watch(attrs.ngModel,function(lastVal){var namesSrc=$parse(attrs.uniqueNamesList)(scope),uniqueProp=attrs.uniqueProp||"name",ignoreCase="false"==attrs.caseSensitive,isBound="true"===attrs.isBound||null==attrs.isBound,updatedVal=getValOrDefault(lastVal,""),list=ArrayUtils.filter(namesSrc,function(it){if(ignoreCase){var valByProp=getValOrDefault(ObjectUtils.get(it,uniqueProp),"");return valByProp.toLowerCase()==updatedVal.toLowerCase()}return ObjectUtils.get(it,uniqueProp)==updatedVal});list.length<=1&&isBound||!isBound&&list.length<1?c.$setValidity("unique",!0):c.$setValidity("unique",!1)})}}}]),angular.module("AttFormValidation").directive("ngEmail",["$parse",function(){return{require:"ngModel",link:function(scope,ele,attrs,c){function validateEmail(email){var re=/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;return re.test(email)}scope.$watch(attrs.ngModel,function(lastVal){validateEmail(lastVal)?c.$setValidity("email",!0):c.$setValidity("email",!1)})}}}]),angular.module("AttFormValidation").directive("ngNumber",["$parse",function(){return{require:"ngModel",link:function(scope,ele,attrs,c){function validateNumber(num){var re=/^[0-9]+$/i;return re.test(num)}scope.$watch(attrs.ngModel,function(lastVal){validateNumber(lastVal)?c.$setValidity("number",!0):c.$setValidity("number",!1)})}}}]),angular.module("AttFormValidation").directive("ngMin",["$parse",function(){return{require:"ngModel",link:function(scope,ele,attrs,c){function validateNumber(num){return num>=min}var min;try{min=parseInt(attrs.ngMin)}catch(e){min=0}scope.$watch(attrs.ngModel,function(lastVal){var isNumeric=/^\d+$/.test(lastVal);return isNumeric?void(validateNumber(lastVal)?c.$setValidity("min",!0):c.$setValidity("min",!1)):void c.$setValidity("min",!0)})}}}]),angular.module("AttFormValidation").directive("ngMax",["$parse",function(){return{require:"ngModel",link:function(scope,ele,attrs,c){function validateNumber(num){return max>=num}var max;try{max=parseInt(attrs.ngMax)}catch(e){max=9999}scope.$watch(attrs.ngModel,function(lastVal){var isNumeric=/^\d+$/.test(lastVal);return isNumeric?void(validateNumber(lastVal)?c.$setValidity("max",!0):c.$setValidity("max",!1)):void c.$setValidity("max",!0)})}}}]),angular.module("AttFormValidation").directive("ngValidcharacters",["$parse",function(){return{require:"ngModel",link:function(scope,ele,attrs,c){function validate(value){var re=new RegExp(regex);return re.test(value)}var regex=attrs.ngValidcharacters;scope.$watch(attrs.ngModel,function(lastVal){validate(lastVal)||""===lastVal?c.$setValidity("validcharacters",!0):c.$setValidity("validcharacters",!1)})}}}]),angular.module("AttFormValidation").directive("ngValidusername",["$parse",function(){return{require:"ngModel",link:function(scope,ele,attrs,c){function validate(value){if(!value)return!1;var parts=value.split("\\");if(2!=parts.length)return!1;var part0=regex.test(parts[0]),part1=regex.test(parts[1]);return!part0&&!part1&&0!=parts[0].length&&0!=parts[1].length}function validateSAML(value){return!(!value||samlRegex.test(value))}var regex=/[\\\"\[\]\:\;\|\=\,\+\*\?\<\>]+/,samlRegex=/[\u0000-\u0019]/,isSAML="SAML"===window.qlikAuthenticationMethod;scope.$watch(attrs.ngModel,function(lastVal){c.$setValidity("validusername",isSAML?validateSAML(lastVal):validate(lastVal))})}}}]),angular.module("AttFormValidation").provider("formValidationHelper",function(){var self=this;this.defaultErrorPlacementStrategy="below-field",this.errorPlacementStrategies={"below-field":function(formFieldElement){formFieldElement.parent().find(".validation-errors").remove();var msgElement=angular.element('<div class="validation-errors"></div>');return formFieldElement.after(msgElement),msgElement},inline:function(){},tooltip:function(){}},this.validationMessages={required:"{0} is required.",email:"The field {0} must be a valid email.",minlength:"{0} must be at least {1} character(s).",maxlength:"The {0} cannot exceed {1} characters.",min:"{0} must be at least {1}.",max:"{0} must be at most {1}.",pattern:"{0} is invalid.",url:"{0} must be a valid URL.",number:"{0} must be a number.",unknown:"{0} is invalid.",unique:"{0} must be unique.",validcharacters:"The {0} contains invalid characters.",validusername:"The {0} contains invalid characters."},this.$get=function(){return{defaultErrorPlacementStrategy:self.defaultErrorPlacementStrategy,errorPlacementStrategies:self.errorPlacementStrategies,validationMessages:self.validationMessages,stringFormat:function(format){var args=Array.prototype.slice.call(arguments,1);return format.replace(/{(\d+)}/g,function(match,number){return"undefined"!=typeof args[number]?args[number]:match})}}}})}();